# ____NGINX Configuration for Load Balancing and Reverse Proxy____

# Example NGINX configuration for acting as a reverse proxy for FastAPI.
# Can also be used for load balancing requests to multiple instances of FastAPI.

worker_processes auto;  # Performance: Dynamically allocate worker processes
events {
    worker_connections 1024;  # Number of connections per worker
}

http {
    include /etc/nginx/mime.types;  # MIME type definitions
    default_type application/octet-stream;  # Default content type

    sendfile on;  # Enable efficient file transfers
    keepalive_timeout 65;  # Timeout for keepalive connections

    upstream fastapi_backend {  # Load balancing between multiple FastAPI instances
        server 127.0.0.1:8000;  # First FastAPI instance
        # Add more FastAPI instances here if needed for load balancing
    }

    server {
        listen 80;  # Listen on port 80 (HTTP)

        location / {
            proxy_pass http://fastapi_backend;  # Reverse proxy to FastAPI app
            proxy_set_header Host $host;  # Preserve original host header
            proxy_set_header X-Real-IP $remote_addr;  # Preserve original IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forwarded IP chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward original protocol (HTTP/HTTPS)
        }
    }
}
